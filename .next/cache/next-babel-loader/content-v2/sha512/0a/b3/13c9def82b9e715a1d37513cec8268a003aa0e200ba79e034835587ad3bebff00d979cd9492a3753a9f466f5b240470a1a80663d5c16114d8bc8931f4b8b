{"ast":null,"code":"const url = process.env.NEXT_PUBLIC_COCKPIT_URL;\nconst token = process.env.NEXT_PUBLIC_COCKPIT_TOKEN;\nexport const getCockpitCollection = async (collectionName, params) => {\n  const requestResult = await fetch(url + `api/collections/get/${collectionName}?${params}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  const cockpitData = await requestResult.json();\n  return cockpitData;\n};\nexport const getCockpitCollections = async collections => {\n  const collectionPromises = collections.map(collection => getCockpitCollection(collection));\n  return await Promise.all(collectionPromises);\n};","map":{"version":3,"sources":["D:/archivegit/blind-blind/src/utils/getCockpitData.ts"],"names":["url","process","env","NEXT_PUBLIC_COCKPIT_URL","token","NEXT_PUBLIC_COCKPIT_TOKEN","getCockpitCollection","collectionName","params","requestResult","fetch","headers","Authorization","cockpitData","json","getCockpitCollections","collections","collectionPromises","map","collection","Promise","all"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,uBAAxB;AACA,MAAMC,KAAK,GAAGH,OAAO,CAACC,GAAR,CAAYG,yBAA1B;AAEA,OAAO,MAAMC,oBAAoB,GAAG,OAClCC,cADkC,EAElCC,MAFkC,KAG/B;AACH,QAAMC,aAAa,GAAG,MAAMC,KAAK,CAC/BV,GAAG,GAAI,uBAAsBO,cAAe,IAAGC,MAAO,EADvB,EAE/B;AACEG,IAAAA,OAAO,EAAE;AAAEC,MAAAA,aAAa,EAAG,UAASR,KAAM;AAAjC;AADX,GAF+B,CAAjC;AAMA,QAAMS,WAAW,GAAG,MAAMJ,aAAa,CAACK,IAAd,EAA1B;AAEA,SAAOD,WAAP;AACD,CAbM;AAeP,OAAO,MAAME,qBAAqB,GAAG,MAAOC,WAAP,IAAiC;AACpE,QAAMC,kBAAkB,GAAGD,WAAW,CAACE,GAAZ,CAAiBC,UAAD,IACzCb,oBAAoB,CAACa,UAAD,CADK,CAA3B;AAGA,SAAO,MAAMC,OAAO,CAACC,GAAR,CAAYJ,kBAAZ,CAAb;AACD,CALM","sourcesContent":["const url = process.env.NEXT_PUBLIC_COCKPIT_URL as string;\r\nconst token = process.env.NEXT_PUBLIC_COCKPIT_TOKEN as string;\r\n\r\nexport const getCockpitCollection = async (\r\n  collectionName: string,\r\n  params?: string\r\n) => {\r\n  const requestResult = await fetch(\r\n    url + `api/collections/get/${collectionName}?${params}`,\r\n    {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    }\r\n  );\r\n  const cockpitData = await requestResult.json();\r\n\r\n  return cockpitData;\r\n};\r\n\r\nexport const getCockpitCollections = async (collections: string[]) => {\r\n  const collectionPromises = collections.map((collection) =>\r\n    getCockpitCollection(collection)\r\n  );\r\n  return await Promise.all(collectionPromises);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}