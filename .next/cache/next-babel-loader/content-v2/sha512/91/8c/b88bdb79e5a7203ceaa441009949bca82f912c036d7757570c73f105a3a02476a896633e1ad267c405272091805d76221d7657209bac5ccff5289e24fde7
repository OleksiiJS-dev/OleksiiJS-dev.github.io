{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useMemo, useEffect, useState, useRef } from 'react';\nimport { useFormik } from 'formik';\nimport { useRouter } from 'next/router';\nimport InputMask from 'react-input-mask';\nimport intlTelInput from 'intl-tel-input';\nimport Fuse from 'fuse.js';\nimport Button from '../Button/Button';\nimport Dropdown from './Dropdown';\nimport { FORM } from '../../constants/form';\nimport warehouses from '../../../npWarehouses.json';\n\nconst Form = ({\n  formikConfig,\n  types,\n  selectOptions,\n  placeholders,\n  suffixes,\n  masks,\n  checkboxText,\n  buttonTitle,\n  optionFields,\n  deliveryChangeHandler\n}) => {\n  const formik = useFormik(formikConfig);\n  const {\n    locale\n  } = useRouter();\n  const phoneRef = useRef(null);\n  const {\n    0: mask,\n    1: setMask\n  } = useState();\n  useEffect(() => {\n    if (formik.values.phone !== undefined) {\n      setMask(intlTelInput(phoneRef.current, {\n        separateDialCode: true,\n        initialCountry: 'ua',\n        preferredCountries: ['ua', 'ru', 'kz', 'us', 'il', 'ae', 'by'],\n        excludeCountries: ['ru', 'by']\n      }));\n    }\n  }, [phoneRef]);\n  useEffect(() => {\n    formik.setValues(formikConfig.initialValues);\n  }, [formikConfig]);\n  const inputWarehouse = useMemo(() => {\n    const options = {\n      includeScore: true,\n      keys: ['settlement']\n    };\n    const fuse = new Fuse(warehouses, options);\n    const currentWarehouses = fuse.search(formik.values['city'] || '');\n\n    if (locale === 'en' || !currentWarehouses.length) {\n      const handleBlur = e => {\n        e.target.value = e.target.value.trim();\n        formik.handleBlur(e);\n        formik.handleChange(e);\n      };\n\n      const InputText = key => /*#__PURE__*/_jsxs(\"div\", {\n        className: \"input-box\",\n        children: [/*#__PURE__*/_jsx(\"input\", {\n          type: \"text\",\n          id: key,\n          name: key,\n          value: formik.values[key],\n          placeholder: placeholders[key],\n          onChange: formik.handleChange,\n          onBlur: handleBlur,\n          onFocus: () => formik.touched[key] = undefined\n        }), !!suffixes && suffixes[key] && /*#__PURE__*/_jsx(\"span\", {\n          className: \"input-suffix\",\n          children: suffixes[key]\n        })]\n      });\n\n      return InputText;\n    }\n\n    const InputField = key => /*#__PURE__*/_jsx(\"div\", {\n      className: \"input-select\",\n      children: /*#__PURE__*/_jsx(Dropdown, {\n        value: formik.values[key],\n        placeholder: placeholders[key],\n        values: currentWarehouses.map(({\n          item: {\n            address\n          }\n        }) => address),\n        setValue: item => formik.setFieldValue(key, item)\n      })\n    });\n\n    return InputField;\n  }, [formik, placeholders, locale]);\n  const inputText = useMemo(() => {\n    const handleBlur = e => {\n      e.target.value = e.target.value.trim();\n      formik.handleBlur(e);\n      formik.handleChange(e);\n    };\n\n    const InputField = key => /*#__PURE__*/_jsxs(\"div\", {\n      className: \"input-box\",\n      children: [/*#__PURE__*/_jsx(\"input\", {\n        type: \"text\",\n        id: key,\n        name: key,\n        value: formik.values[key],\n        placeholder: placeholders[key],\n        onChange: formik.handleChange,\n        onBlur: handleBlur,\n        onFocus: () => formik.touched[key] = undefined\n      }), !!suffixes && suffixes[key] && /*#__PURE__*/_jsx(\"span\", {\n        className: \"input-suffix\",\n        children: suffixes[key]\n      })]\n    });\n\n    return InputField;\n  }, [formik, placeholders, suffixes]);\n  const inputTextWithMask = useMemo(() => {\n    const InputField = key => /*#__PURE__*/_jsxs(\"div\", {\n      className: \"input-box\",\n      children: [/*#__PURE__*/_jsx(InputMask, {\n        type: \"text\",\n        id: key,\n        name: key,\n        value: formik.values[key],\n        placeholder: placeholders[key],\n        onChange: formik.handleChange,\n        onBlur: formik.handleBlur,\n        onFocus: () => formik.touched[key] = undefined,\n        mask: masks ? masks[key] : ''\n      }), !!suffixes && suffixes[key] && /*#__PURE__*/_jsx(\"span\", {\n        className: \"input-suffix\",\n        children: suffixes[key]\n      })]\n    });\n\n    return InputField;\n  }, [formik, masks, placeholders, suffixes]);\n  const inputTextArea = useMemo(() => {\n    const InputField = key => /*#__PURE__*/_jsxs(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsx(\"textarea\", {\n        id: key,\n        name: key,\n        value: formik.values[key],\n        placeholder: placeholders[key],\n        onChange: formik.handleChange,\n        onBlur: formik.handleBlur,\n        onFocus: () => formik.touched[key] = undefined\n      }), !!suffixes && suffixes[key] && /*#__PURE__*/_jsx(\"span\", {\n        className: \"input-suffix\",\n        children: suffixes[key]\n      })]\n    });\n\n    return InputField;\n  }, [formik, placeholders, suffixes]);\n  const inputCheckbox = useMemo(() => {\n    const InputField = key => /*#__PURE__*/_jsxs(\"div\", {\n      className: \"input-checkbox\",\n      children: [/*#__PURE__*/_jsx(\"input\", {\n        className: \"checkbox\",\n        type: \"checkbox\",\n        id: key,\n        name: key,\n        value: formik.values[key],\n        onChange: formik.handleChange,\n        onBlur: formik.handleBlur,\n        onFocus: () => formik.touched[key] = undefined\n      }), /*#__PURE__*/_jsx(\"label\", {\n        className: \"input-checkbox__label\",\n        htmlFor: key,\n        children: checkboxText\n      })]\n    });\n\n    return InputField;\n  }, [formik, checkboxText]);\n  const inputDelivery = useMemo(() => {\n    function deliverySetValue(item, key) {\n      formik.setFieldValue(key, item);\n      if (deliveryChangeHandler) deliveryChangeHandler(item);\n    }\n\n    const InputField = key => /*#__PURE__*/_jsx(\"div\", {\n      className: \"input-select\",\n      children: /*#__PURE__*/_jsx(Dropdown, {\n        value: formik.values[key],\n        placeholder: placeholders[key],\n        values: [FORM[locale].novaPoshta, FORM[locale].ukrPoshta, FORM[locale].courierNovaPoshta],\n        setValue: item => deliverySetValue(item, key)\n      })\n    });\n\n    return InputField;\n  }, [formik, placeholders, selectOptions]);\n  const inputSelect = useMemo(() => {\n    const InputField = key => /*#__PURE__*/_jsx(\"div\", {\n      className: \"input-select\",\n      children: /*#__PURE__*/_jsx(Dropdown, {\n        value: formik.values[key],\n        placeholder: placeholders[key],\n        values: selectOptions ? selectOptions[key] : [],\n        setValue: item => formik.setFieldValue(key, item)\n      })\n    });\n\n    return InputField;\n  }, [formik, placeholders, selectOptions]);\n  const inputPhone = useMemo(() => {\n    const InputField = key => /*#__PURE__*/_jsxs(\"div\", {\n      className: \"input-box\",\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"phone-mask-container\",\n        children: /*#__PURE__*/_jsx(\"input\", {\n          type: \"text\",\n          id: key,\n          name: key,\n          ref: phoneRef,\n          value: formik.values[key],\n          placeholder: placeholders[key],\n          onChange: e => {\n            if (e.target.value.length < 11 && e.target.value.match(/^\\d+$/) || e.target.value.match(/[+]\\d+$/) && e.target.value.length < 15) {\n              formik.handleChange(e);\n            }\n          }\n        })\n      }), !!suffixes && suffixes[key] && /*#__PURE__*/_jsx(\"span\", {\n        className: \"input-suffix\",\n        children: suffixes[key]\n      })]\n    });\n\n    return InputField;\n  }, [formik, placeholders, suffixes]);\n  const inputDate = useMemo(() => {\n    const InputField = key => /*#__PURE__*/_jsx(\"div\", {\n      className: \"input-date\",\n      children: /*#__PURE__*/_jsx(\"input\", {\n        type: \"text\",\n        id: key,\n        name: key,\n        value: formik.values[key],\n        placeholder: placeholders[key],\n        onChange: formik.handleChange,\n        onFocus: e => {\n          e.currentTarget.type = 'date';\n        },\n        onBlur: e => {\n          e.currentTarget.type = 'text';\n        }\n      })\n    });\n\n    return InputField;\n  }, [formik, placeholders, selectOptions]);\n\n  const renderField = (key, idx) => {\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: \"form-row\",\n      children: [types[key] !== 'text' || !masks || masks && !masks[key] ? InputTypes[types[key]](key) : InputTypes.maskedText(key), formik.errors[key] && formik.touched[key] && /*#__PURE__*/_jsx(\"p\", {\n        className: \"error\",\n        children: formik.errors[key]\n      })]\n    }, idx);\n  };\n\n  const InputTypes = {\n    text: inputText,\n    select: inputSelect,\n    checkbox: inputCheckbox,\n    phone: inputPhone,\n    maskedText: inputTextWithMask,\n    textArea: inputTextArea,\n    warehouse: inputWarehouse,\n    delivery: inputDelivery,\n    date: inputDate\n  };\n\n  const findOptionField = key => optionFields === null || optionFields === void 0 ? void 0 : optionFields.find(({\n    fieldName\n  }) => key === fieldName);\n\n  return /*#__PURE__*/_jsxs(\"form\", {\n    onSubmit: e => {\n      e.preventDefault();\n    },\n    children: [Object.keys(formik.values).map((key, idx) => {\n      const optionField = findOptionField(key);\n\n      if ((optionField === null || optionField === void 0 ? void 0 : optionField.dependFieldValue) === formik.values[optionField === null || optionField === void 0 ? void 0 : optionField.dependFieldName] || !optionField) {\n        return renderField(key, idx);\n      }\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: 'button-container',\n      children: /*#__PURE__*/_jsx(Button, {\n        title: buttonTitle,\n        callback: () => {\n          if (formik.values.phone === undefined) return formik.handleSubmit();\n\n          if (formik.values.phone.length > 8 && formik.values.phone.length < 11) {\n            formik.values.phone = `+${mask.getSelectedCountryData().dialCode}${formik.values.phone}`;\n          }\n\n          if (formik.values.phone.length < 15) formik.handleSubmit();\n        },\n        type: \"button\"\n      })\n    })]\n  });\n};\n\nexport default Form;","map":null,"metadata":{},"sourceType":"module"}