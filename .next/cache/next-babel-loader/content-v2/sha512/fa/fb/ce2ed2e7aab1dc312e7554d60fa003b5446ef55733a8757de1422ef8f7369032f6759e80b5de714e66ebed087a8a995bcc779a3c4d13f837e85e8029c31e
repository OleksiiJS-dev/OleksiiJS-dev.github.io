{"ast":null,"code":"import useSWR from 'swr';\n\nconst absoluteUrl = url => {\n  const isServer = false;\n  const server = isServer ? window.location.origin + '/' : process.env.NEXT_PUBLIC_COCKPIT_URL;\n  return server + url;\n};\n\nexport const useCockpit = (withSuspense, params) => {\n  const fetcher = url => {\n    return fetch(url).then(res => res.json());\n  };\n\n  const url = 'api/getGoods';\n  const urlWithParams = params ? url + '?' + params : url;\n  const {\n    data,\n    error\n  } = useSWR(absoluteUrl(urlWithParams), fetcher, {\n    suspense: withSuspense\n  });\n\n  if (!error) {\n    return {\n      data,\n      error\n    };\n  }\n\n  return {\n    data: null,\n    error\n  };\n};\nexport default useCockpit;","map":{"version":3,"sources":["D:/archivegit/blind-blind/src/hooks/useCockpit.ts"],"names":["useSWR","absoluteUrl","url","isServer","server","window","location","origin","process","env","NEXT_PUBLIC_COCKPIT_URL","useCockpit","withSuspense","params","fetcher","fetch","then","res","json","urlWithParams","data","error","suspense"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,KAAnB;;AAEA,MAAMC,WAAW,GAAIC,GAAD,IAAyB;AAC3C,QAAMC,QAAQ,QAAd;AAEA,QAAMC,MAAM,GAAGD,QAAQ,GACnBE,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GAAyB,GADN,GAEnBC,OAAO,CAACC,GAAR,CAAYC,uBAFhB;AAIA,SAAON,MAAM,GAAGF,GAAhB;AACD,CARD;;AAUA,OAAO,MAAMS,UAAU,GAAG,CAAIC,YAAJ,EAA2BC,MAA3B,KAA+C;AACvE,QAAMC,OAAO,GAAIZ,GAAD,IAA6B;AAC3C,WAAOa,KAAK,CAACb,GAAD,CAAL,CAAWc,IAAX,CAAiBC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAAzB,CAAP;AACD,GAFD;;AAIA,QAAMhB,GAAG,GAAG,cAAZ;AACA,QAAMiB,aAAa,GAAGN,MAAM,GAAGX,GAAG,GAAG,GAAN,GAAYW,MAAf,GAAwBX,GAApD;AACA,QAAM;AAAEkB,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBrB,MAAM,CAACC,WAAW,CAACkB,aAAD,CAAZ,EAA6BL,OAA7B,EAAsC;AAClEQ,IAAAA,QAAQ,EAAEV;AADwD,GAAtC,CAA9B;;AAIA,MAAI,CAACS,KAAL,EAAY;AACV,WAAO;AAAED,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAP;AACD;;AAED,SAAO;AAAED,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA;AAAd,GAAP;AACD,CAhBM;AAkBP,eAAeV,UAAf","sourcesContent":["import useSWR from 'swr';\r\n\r\nconst absoluteUrl = (url: string): string => {\r\n  const isServer = typeof window !== 'undefined';\r\n\r\n  const server = isServer\r\n    ? window.location.origin + '/'\r\n    : process.env.NEXT_PUBLIC_COCKPIT_URL;\r\n\r\n  return server + url;\r\n};\r\n\r\nexport const useCockpit = <T>(withSuspense: boolean, params?: string) => {\r\n  const fetcher = (url: string): Promise<T> => {\r\n    return fetch(url).then((res) => res.json());\r\n  };\r\n\r\n  const url = 'api/getGoods';\r\n  const urlWithParams = params ? url + '?' + params : url;\r\n  const { data, error } = useSWR(absoluteUrl(urlWithParams), fetcher, {\r\n    suspense: withSuspense,\r\n  });\r\n\r\n  if (!error) {\r\n    return { data, error };\r\n  }\r\n\r\n  return { data: null, error };\r\n};\r\n\r\nexport default useCockpit;\r\n"]},"metadata":{},"sourceType":"module"}