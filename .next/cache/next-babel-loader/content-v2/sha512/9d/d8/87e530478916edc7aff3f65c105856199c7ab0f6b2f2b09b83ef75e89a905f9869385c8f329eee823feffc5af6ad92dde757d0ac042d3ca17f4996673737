{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport useSWR from 'swr';\n\nvar absoluteUrl = function absoluteUrl(url) {\n  var isServer = true;\n  var server = isServer ? window.location.origin + '/' : process.env.NEXT_PUBLIC_COCKPIT_URL;\n  return server + url;\n};\n\nexport var useCockpit = function useCockpit(withSuspense, params) {\n  _s();\n\n  var fetcher = function fetcher(url) {\n    return fetch(url).then(function (res) {\n      return res.json();\n    });\n  };\n\n  var url = 'api/getGoods';\n  var urlWithParams = params ? url + '?' + params : url;\n\n  var _useSWR = useSWR(absoluteUrl(urlWithParams), fetcher, {\n    suspense: withSuspense\n  }),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  if (!error) {\n    return {\n      data: data,\n      error: error\n    };\n  }\n\n  return {\n    data: null,\n    error: error\n  };\n};\n\n_s(useCockpit, \"r2QYs02BSrn+Eu/1uMGZi8N+HnQ=\", false, function () {\n  return [useSWR];\n});\n\nexport default useCockpit;","map":{"version":3,"sources":["D:/archivegit/blind-blind/src/hooks/useCockpit.ts"],"names":["useSWR","absoluteUrl","url","isServer","server","window","location","origin","process","env","NEXT_PUBLIC_COCKPIT_URL","useCockpit","withSuspense","params","fetcher","fetch","then","res","json","urlWithParams","suspense","data","error"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,KAAnB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD,EAAyB;AAC3C,MAAMC,QAAQ,OAAd;AAEA,MAAMC,MAAM,GAAGD,QAAQ,GACnBE,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GAAyB,GADN,GAEnBC,OAAO,CAACC,GAAR,CAAYC,uBAFhB;AAIA,SAAON,MAAM,GAAGF,GAAhB;AACD,CARD;;AAUA,OAAO,IAAMS,UAAU,GAAG,SAAbA,UAAa,CAAIC,YAAJ,EAA2BC,MAA3B,EAA+C;AAAA;;AACvE,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAACZ,GAAD,EAA6B;AAC3C,WAAOa,KAAK,CAACb,GAAD,CAAL,CAAWc,IAAX,CAAgB,UAACC,GAAD;AAAA,aAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,KAAhB,CAAP;AACD,GAFD;;AAIA,MAAMhB,GAAG,GAAG,cAAZ;AACA,MAAMiB,aAAa,GAAGN,MAAM,GAAGX,GAAG,GAAG,GAAN,GAAYW,MAAf,GAAwBX,GAApD;;AANuE,gBAO/CF,MAAM,CAACC,WAAW,CAACkB,aAAD,CAAZ,EAA6BL,OAA7B,EAAsC;AAClEM,IAAAA,QAAQ,EAAER;AADwD,GAAtC,CAPyC;AAAA,MAO/DS,IAP+D,WAO/DA,IAP+D;AAAA,MAOzDC,KAPyD,WAOzDA,KAPyD;;AAWvE,MAAI,CAACA,KAAL,EAAY;AACV,WAAO;AAAED,MAAAA,IAAI,EAAJA,IAAF;AAAQC,MAAAA,KAAK,EAALA;AAAR,KAAP;AACD;;AAED,SAAO;AAAED,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,KAAK,EAALA;AAAd,GAAP;AACD,CAhBM;;GAAMX,U;UAOaX,M;;;AAW1B,eAAeW,UAAf","sourcesContent":["import useSWR from 'swr';\r\n\r\nconst absoluteUrl = (url: string): string => {\r\n  const isServer = typeof window !== 'undefined';\r\n\r\n  const server = isServer\r\n    ? window.location.origin + '/'\r\n    : process.env.NEXT_PUBLIC_COCKPIT_URL;\r\n\r\n  return server + url;\r\n};\r\n\r\nexport const useCockpit = <T>(withSuspense: boolean, params?: string) => {\r\n  const fetcher = (url: string): Promise<T> => {\r\n    return fetch(url).then((res) => res.json());\r\n  };\r\n\r\n  const url = 'api/getGoods';\r\n  const urlWithParams = params ? url + '?' + params : url;\r\n  const { data, error } = useSWR(absoluteUrl(urlWithParams), fetcher, {\r\n    suspense: withSuspense,\r\n  });\r\n\r\n  if (!error) {\r\n    return { data, error };\r\n  }\r\n\r\n  return { data: null, error };\r\n};\r\n\r\nexport default useCockpit;\r\n"]},"metadata":{},"sourceType":"module"}