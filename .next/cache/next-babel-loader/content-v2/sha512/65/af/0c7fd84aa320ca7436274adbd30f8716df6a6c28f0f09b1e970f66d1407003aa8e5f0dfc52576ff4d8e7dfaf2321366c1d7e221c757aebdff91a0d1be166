{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useRouter } from 'next/router';\nimport React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport OrderSummaryList from './OrderSummaryList';\nimport ShippingMainForm from './ShippingMainForm';\nimport { cartContext } from '../../context/cartContext';\nimport { currencyContext } from '../../context/currencyContext';\nimport { FORM } from '../../constants/form';\n\nvar Shipping = function Shipping() {\n  var _useRouter = useRouter(),\n      locale = _useRouter.locale,\n      push = _useRouter.push;\n\n  var _ref = useContext(cartContext),\n      cart = _ref.cart,\n      clearCart = _ref.clearCart;\n\n  var calcTotalCheckout = useCallback(function () {\n    return cart.reduce(function (counter, cartItem) {\n      return counter + (cartItem.amount * Number.parseFloat(cartItem.price) || 0);\n    }, 0);\n  }, [cart]);\n\n  var _useState = useState(calcTotalCheckout()),\n      totalCheckout = _useState[0],\n      setTotalCheckout = _useState[1];\n\n  var _useState2 = useState('0'),\n      currencyTotalCheckout = _useState2[0],\n      setCurrencyTotalCheckout = _useState2[1];\n\n  var _useState3 = useState(''),\n      deliveryType = _useState3[0],\n      setDeliveryType = _useState3[1];\n\n  var _useState4 = useState(0),\n      deliveryCost = _useState4[0],\n      setDeliveryCost = _useState4[1];\n\n  var couponRef = useRef();\n\n  var _useState5 = useState(),\n      formikValues = _useState5[0],\n      setFormikValues = _useState5[1];\n\n  var _ref2 = useContext(currencyContext),\n      currency = _ref2.currency,\n      currencyRate = _ref2.currencyRate,\n      USDRate = _ref2.USDRate;\n\n  var checkDiscountCode = function checkDiscountCode(enteredCode) {\n    fetch('/api/getPromocode', {\n      method: 'POST',\n      body: enteredCode\n    }).then(function (res) {\n      return res.json();\n    }).then(function (json) {\n      var discount = json.discount;\n      couponRef.current = enteredCode;\n\n      if (discount) {\n        setTotalCheckout(discount.inPercent ? calcTotalCheckout() * (1 - Number.parseFloat(discount.discount) / 100) : calcTotalCheckout() - Number.parseFloat(discount.discount));\n      } else setTotalCheckout(calcTotalCheckout());\n    });\n  };\n\n  var sendShippingEvent = useCallback(function (event) {\n    if (true) {\n      fbq('track', event, {\n        content_type: 'product',\n        content_ids: cart.map(function (item) {\n          var cartItem = item;\n          return (cartItem === null || cartItem === void 0 ? void 0 : cartItem.link.replace('/', '')) || 'cerificate';\n        }),\n        currency: currency.toString() === 'UAH' ? 'USD' : currency.toString(),\n        value: currency.toString() === 'UAH' ? calcTotalCheckout() / USDRate : calcTotalCheckout() / currencyRate\n      });\n    }\n  }, [cart, USDRate, calcTotalCheckout, currency, currencyRate]);\n  var calcDeliveryCost = useCallback(function (deliveryType) {\n    if (deliveryType === FORM[locale].ukrPoshta) {\n      if (deliveryCost === 0) setDeliveryCost(cart.reduce(function (cost, _ref3) {\n        var amount = _ref3.amount;\n        return cost += amount * 200;\n      }, 400));\n    } else {\n      setDeliveryCost(0);\n    }\n  }, [cart, deliveryCost, locale, setDeliveryCost]);\n  useEffect(function () {\n    calcDeliveryCost(deliveryType);\n  }, [deliveryType, cart, deliveryCost, locale, setDeliveryCost, calcDeliveryCost, totalCheckout]);\n\n  var deliveryChangeHandler = function deliveryChangeHandler(item) {\n    setDeliveryType(item);\n  };\n\n  useEffect(function () {\n    sendShippingEvent('InitiateCheckout');\n  }, [sendShippingEvent]);\n  useEffect(function () {\n    setTotalCheckout(calcTotalCheckout());\n  }, [calcTotalCheckout]);\n  useEffect(function () {\n    setCurrencyTotalCheckout(((totalCheckout + deliveryCost) / currencyRate).toFixed(2));\n  }, [totalCheckout, currencyRate, deliveryCost]);\n  useEffect(function () {\n    if (formikValues) confirmCheckout(formikValues);\n  }, [formikValues]);\n  var confirmCheckout = useCallback(function (values) {\n    calcTotalCheckout();\n    var firstName = values.firstName,\n        lastName = values.lastName,\n        country = values.country,\n        city = values.city,\n        email = values.email,\n        phone = values.phone,\n        paymentMethod = values.paymentMethod,\n        deliveryMethod = values.deliveryMethod,\n        service = values.service,\n        checkbox = values.checkbox,\n        warehouse = values.warehouse,\n        street = values.street,\n        house = values.house,\n        flat = values.flat;\n    if (checkbox) localStorage.setItem('shipping', JSON.stringify({\n      firstName: firstName,\n      lastName: lastName,\n      country: country,\n      city: city,\n      email: email,\n      phone: phone,\n      paymentMethod: paymentMethod,\n      service: service,\n      checkbox: checkbox,\n      warehouse: warehouse,\n      street: street,\n      house: house,\n      flat: flat\n    }));else localStorage.removeItem('shipping');\n    var transaction_id = 'purchase' + Math.random().toString(10).substr(2);\n    gtag('event', 'purchase', {\n      transaction_id: transaction_id,\n      affiliation: 'Blind',\n      value: currencyTotalCheckout,\n      currency: currency,\n      tax: 0,\n      shipping: deliveryCost,\n      items: cart.map(function (item, index) {\n        return {\n          id: item.id,\n          name: item.title,\n          list_name: 'Goods',\n          brand: 'BLIND',\n          category: item.collectionTitle,\n          variant: item.details,\n          list_position: index + 1,\n          quantity: item.amount,\n          price: item.price\n        };\n      })\n    });\n    var currentLocale = locale;\n    var url = '/api/checkout';\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: firstName,\n        surname: lastName,\n        deliveryService: service,\n        paymentType: paymentMethod,\n        totalSum: +currencyTotalCheckout,\n        coupon: couponRef.current,\n        locale: currentLocale,\n        email: email,\n        country: country,\n        city: city,\n        phone: phone,\n        items: cart,\n        currency: currency,\n        deliveryMethod: deliveryMethod,\n        deliveryCost: deliveryCost,\n        warehouse: deliveryMethod === FORM[locale].novaPoshta ? warehouse : '',\n        street: deliveryMethod === FORM[locale].courierNovaPoshta ? street : '',\n        house: deliveryMethod === FORM[locale].courierNovaPoshta ? house : '',\n        flat: deliveryMethod === FORM[locale].courierNovaPoshta ? flat : ''\n      })\n    }).then(function (data) {\n      return data.json();\n    }).then(function (_ref4) {\n      var signature = _ref4.signature,\n          data = _ref4.data;\n      console.log(signature);\n      console.log(data);\n      if (true && paymentMethod === FORM[currentLocale].paymentOnline) window.location.replace(\"https://www.liqpay.ua/api/3/checkout?data=\".concat(data, \"&signature=\").concat(signature));\n      push('/thank-you');\n      clearCart();\n    });\n  }, [cart, calcTotalCheckout, currencyTotalCheckout]);\n  var confirmCheckoutWrapper = useCallback(function (values) {\n    setFormikValues(values);\n  }, []);\n  var form = useMemo(function () {\n    return /*#__PURE__*/_jsx(ShippingMainForm, {\n      deliveryChangeHandler: deliveryChangeHandler,\n      confirmCheckout: confirmCheckoutWrapper\n    });\n  }, [confirmCheckoutWrapper]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: \"shipping container\",\n    children: [/*#__PURE__*/_jsx(OrderSummaryList, {\n      currencyTotalCheckout: currencyTotalCheckout,\n      checkDiscountCode: checkDiscountCode\n    }), form]\n  });\n};\n\nexport default Shipping;","map":null,"metadata":{},"sourceType":"module"}