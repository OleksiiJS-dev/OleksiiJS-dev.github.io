{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useRouter } from 'next/router';\nimport React, { useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport OrderSummaryList from './OrderSummaryList';\nimport ShippingMainForm from './ShippingMainForm';\nimport { cartContext } from '../../context/cartContext';\nimport { currencyContext } from '../../context/currencyContext';\nimport { FORM } from '../../constants/form';\n\nconst Shipping = () => {\n  const {\n    locale,\n    push\n  } = useRouter();\n  const {\n    cart,\n    clearCart\n  } = useContext(cartContext);\n  const calcTotalCheckout = useCallback(() => cart.reduce((counter, cartItem) => {\n    return counter + (cartItem.amount * Number.parseFloat(cartItem.price) || 0);\n  }, 0), [cart]);\n  const {\n    0: totalCheckout,\n    1: setTotalCheckout\n  } = useState(calcTotalCheckout());\n  const {\n    0: currencyTotalCheckout,\n    1: setCurrencyTotalCheckout\n  } = useState('0');\n  const {\n    0: deliveryType,\n    1: setDeliveryType\n  } = useState('');\n  const {\n    0: deliveryCost,\n    1: setDeliveryCost\n  } = useState(0);\n  const couponRef = useRef();\n  const {\n    0: formikValues,\n    1: setFormikValues\n  } = useState();\n  const {\n    currency,\n    currencyRate,\n    USDRate\n  } = useContext(currencyContext);\n\n  const checkDiscountCode = enteredCode => {\n    fetch('/api/getPromocode', {\n      method: 'POST',\n      body: enteredCode\n    }).then(res => res.json()).then(json => {\n      const {\n        discount\n      } = json;\n      couponRef.current = enteredCode;\n\n      if (discount) {\n        setTotalCheckout(discount.inPercent ? calcTotalCheckout() * (1 - Number.parseFloat(discount.discount) / 100) : calcTotalCheckout() - Number.parseFloat(discount.discount));\n      } else setTotalCheckout(calcTotalCheckout());\n    });\n  };\n\n  const sendShippingEvent = useCallback(event => {\n    if (false) {\n      fbq('track', event, {\n        content_type: 'product',\n        content_ids: cart.map(item => {\n          const cartItem = item;\n          return (cartItem === null || cartItem === void 0 ? void 0 : cartItem.link.replace('/', '')) || 'cerificate';\n        }),\n        currency: currency.toString() === 'UAH' ? 'USD' : currency.toString(),\n        value: currency.toString() === 'UAH' ? calcTotalCheckout() / USDRate : calcTotalCheckout() / currencyRate\n      });\n    }\n  }, [cart, USDRate, calcTotalCheckout, currency, currencyRate]);\n  const calcDeliveryCost = useCallback(deliveryType => {\n    if (deliveryType === FORM[locale].ukrPoshta) {\n      if (deliveryCost === 0) setDeliveryCost(cart.reduce((cost, {\n        amount\n      }) => cost += amount * 200, 400));\n    } else {\n      setDeliveryCost(0);\n    }\n  }, [cart, deliveryCost, locale, setDeliveryCost]);\n  useEffect(() => {\n    calcDeliveryCost(deliveryType);\n  }, [deliveryType, cart, deliveryCost, locale, setDeliveryCost, calcDeliveryCost, totalCheckout]);\n\n  const deliveryChangeHandler = item => {\n    setDeliveryType(item);\n  };\n\n  useEffect(() => {\n    sendShippingEvent('InitiateCheckout');\n  }, [sendShippingEvent]);\n  useEffect(() => {\n    setTotalCheckout(calcTotalCheckout());\n  }, [calcTotalCheckout]);\n  useEffect(() => {\n    setCurrencyTotalCheckout(((totalCheckout + deliveryCost) / currencyRate).toFixed(2));\n  }, [totalCheckout, currencyRate, deliveryCost]);\n  useEffect(() => {\n    if (formikValues) confirmCheckout(formikValues);\n  }, [formikValues]);\n  const confirmCheckout = useCallback(values => {\n    calcTotalCheckout();\n    const {\n      firstName,\n      lastName,\n      country,\n      city,\n      email,\n      phone,\n      paymentMethod,\n      deliveryMethod,\n      service,\n      checkbox,\n      warehouse,\n      street,\n      house,\n      flat\n    } = values;\n    if (checkbox) localStorage.setItem('shipping', JSON.stringify({\n      firstName,\n      lastName,\n      country,\n      city,\n      email,\n      phone,\n      paymentMethod,\n      service,\n      checkbox,\n      warehouse,\n      street,\n      house,\n      flat\n    }));else localStorage.removeItem('shipping');\n    const transaction_id = 'purchase' + Math.random().toString(10).substr(2);\n    gtag('event', 'purchase', {\n      transaction_id,\n      affiliation: 'Blind',\n      value: currencyTotalCheckout,\n      currency,\n      tax: 0,\n      shipping: deliveryCost,\n      items: cart.map((item, index) => {\n        return {\n          id: item.id,\n          name: item.title,\n          list_name: 'Goods',\n          brand: 'BLIND',\n          category: item.collectionTitle,\n          variant: item.details,\n          list_position: index + 1,\n          quantity: item.amount,\n          price: item.price\n        };\n      })\n    });\n    const currentLocale = locale;\n    const url = '/api/checkout';\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: firstName,\n        surname: lastName,\n        deliveryService: service,\n        paymentType: paymentMethod,\n        totalSum: +currencyTotalCheckout,\n        coupon: couponRef.current,\n        locale: currentLocale,\n        email,\n        country,\n        city,\n        phone,\n        items: cart,\n        currency,\n        deliveryMethod,\n        deliveryCost,\n        warehouse: deliveryMethod === FORM[locale].novaPoshta ? warehouse : '',\n        street: deliveryMethod === FORM[locale].courierNovaPoshta ? street : '',\n        house: deliveryMethod === FORM[locale].courierNovaPoshta ? house : '',\n        flat: deliveryMethod === FORM[locale].courierNovaPoshta ? flat : ''\n      })\n    }).then(data => data.json()).then(({\n      signature,\n      data\n    }) => {\n      console.log(signature);\n      console.log(data);\n      if (false && paymentMethod === FORM[currentLocale].paymentOnline) window.location.replace(`https://www.liqpay.ua/api/3/checkout?data=${data}&signature=${signature}`);\n      push('/thank-you');\n      clearCart();\n    });\n  }, [cart, calcTotalCheckout, currencyTotalCheckout]);\n  const confirmCheckoutWrapper = useCallback(values => {\n    setFormikValues(values);\n  }, []);\n  const form = useMemo(() => /*#__PURE__*/_jsx(ShippingMainForm, {\n    deliveryChangeHandler: deliveryChangeHandler,\n    confirmCheckout: confirmCheckoutWrapper\n  }), [confirmCheckoutWrapper]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: \"shipping container\",\n    children: [/*#__PURE__*/_jsx(OrderSummaryList, {\n      currencyTotalCheckout: currencyTotalCheckout,\n      checkDiscountCode: checkDiscountCode\n    }), form]\n  });\n};\n\nexport default Shipping;","map":null,"metadata":{},"sourceType":"module"}