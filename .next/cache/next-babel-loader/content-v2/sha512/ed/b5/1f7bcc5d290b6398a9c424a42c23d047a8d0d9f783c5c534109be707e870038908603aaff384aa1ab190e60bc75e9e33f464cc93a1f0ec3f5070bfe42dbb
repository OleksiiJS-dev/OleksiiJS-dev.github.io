{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/user/Documents/GitHub/blind-blind/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/user/Documents/GitHub/blind-blind/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar url = process.env.NEXT_PUBLIC_COCKPIT_URL;\nvar token = process.env.NEXT_PUBLIC_COCKPIT_TOKEN;\nexport var getCockpitCollection = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(collectionName, params) {\n    var requestResult, cockpitData;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(url + \"api/collections/get/\".concat(collectionName, \"?\").concat(params), {\n              headers: {\n                Authorization: \"Bearer \".concat(token)\n              }\n            });\n\n          case 2:\n            requestResult = _context.sent;\n            _context.next = 5;\n            return requestResult.json();\n\n          case 5:\n            cockpitData = _context.sent;\n            return _context.abrupt(\"return\", cockpitData);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getCockpitCollection(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getCockpitCollections = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(collections) {\n    var collectionPromises;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            collectionPromises = collections.map(function (collection) {\n              return getCockpitCollection(collection);\n            });\n            _context2.next = 3;\n            return Promise.all(collectionPromises);\n\n          case 3:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getCockpitCollections(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}