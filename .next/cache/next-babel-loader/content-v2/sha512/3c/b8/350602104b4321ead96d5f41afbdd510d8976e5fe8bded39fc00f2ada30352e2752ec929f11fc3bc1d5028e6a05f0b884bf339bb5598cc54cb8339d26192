{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/* eslint-disable react/no-array-index-key */\nimport React, { useState, useEffect, useRef } from 'react';\nconst TRANSITION = 500;\n\nconst Carousel = ({\n  children,\n  infinity = true,\n  buttonPrev,\n  buttonNext,\n  withRange,\n  withDots,\n  callback\n}) => {\n  const carousel = useRef();\n  const {\n    0: slide,\n    1: setSlide\n  } = useState(0);\n\n  const handleNextSlide = () => {\n    if (slide + 1 < children.length) setSlide(slide + 1);else if (infinity) {\n      setSlide(slide + 1);\n      setTimeout(() => {\n        if (carousel.current) carousel.current.style.transition = 'none';\n        setSlide(0);\n        setTimeout(() => {\n          if (carousel.current) carousel.current.style.transition = `transform ${TRANSITION}ms`;\n        }, 10);\n      }, TRANSITION + 100);\n    }\n  };\n\n  const handlePrevSlide = () => {\n    if (slide - 1 >= 0) {\n      setSlide(slide - 1);\n    } else if (infinity) {\n      setSlide(slide - 1);\n      setTimeout(() => {\n        if (carousel.current) carousel.current.style.transition = 'none';\n        setSlide(children.length - 1);\n        setTimeout(() => {\n          if (carousel.current) carousel.current.style.transition = `transform ${TRANSITION}ms`;\n        }, 10);\n      }, TRANSITION + 100);\n    }\n  };\n\n  const handleTouch = () => {\n    let startX = 0;\n\n    const handleTouchStart = e => {\n      const {\n        screenX\n      } = e.touches[0];\n      startX = screenX;\n      if (carousel.current) carousel.current.style.transition = 'none';\n    };\n\n    const handleTouchMove = e => {\n      var _carousel$current;\n\n      const {\n        screenX\n      } = e.changedTouches[0];\n      const {\n        offsetWidth = 0\n      } = (_carousel$current = carousel.current) !== null && _carousel$current !== void 0 ? _carousel$current : {};\n      const delta = screenX - startX;\n      if (infinity || !(slide === children.length - 1 && delta < 0) && !(slide === 0 && delta > 0)) if (carousel.current) carousel.current.style.transform = `translateX(${-offsetWidth * slide + delta}px)`;\n    };\n\n    const handleTouchEnd = e => {\n      const {\n        screenX\n      } = e.changedTouches[0];\n      const delta = screenX - startX;\n      if (carousel.current) carousel.current.style.transition = `transform ${TRANSITION}ms`;\n      if (delta < -40) handleNextSlide();else if (delta > 40) handlePrevSlide();else if (carousel.current) carousel.current.style.transform = `translateX(-${100 * slide}%)`;\n    };\n\n    if (carousel.current) {\n      carousel.current.addEventListener('touchstart', handleTouchStart, {\n        passive: true\n      });\n      carousel.current.addEventListener('touchmove', handleTouchMove, {\n        passive: false\n      });\n      carousel.current.addEventListener('touchend', handleTouchEnd, {\n        passive: true\n      });\n    }\n\n    return () => {\n      if (carousel.current) {\n        carousel.current.removeEventListener('touchstart', handleTouchStart);\n        carousel.current.removeEventListener('touchmove', handleTouchMove);\n        carousel.current.removeEventListener('touchend', handleTouchEnd);\n      }\n    };\n  };\n\n  useEffect(() => {\n    if (carousel.current) carousel.current.style.transform = `translateX(${-100 * slide}%)`;\n    const touchcleanUp = handleTouch();\n    if (callback) callback(slide);\n    return () => {\n      touchcleanUp();\n    };\n  }, [slide]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: \"carousel\",\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: \"carousel-list\",\n      ref: carousel,\n      style: {\n        marginLeft: `-${children.length * 100 * +infinity}%`,\n        transition: `transform ${TRANSITION}ms`\n      },\n      children: [infinity && children.map((child, idx) => /*#__PURE__*/_jsx(\"div\", {\n        className: \"carousel-list-item\",\n        children: child\n      }, idx)), children.map((child, idx) => /*#__PURE__*/_jsx(\"div\", {\n        className: `carousel-list-item ${idx === slide ? 'carousel-list-item-current' : ''}`,\n        children: child\n      }, idx)), infinity && children.map((child, idx) => /*#__PURE__*/_jsx(\"div\", {\n        className: \"carousel-list-item\",\n        children: child\n      }, idx))]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"carousel-buttons\",\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        role: \"presentation\",\n        className: \"carousel-buttons-prev\",\n        onClick: handlePrevSlide,\n        children: buttonPrev\n      }), /*#__PURE__*/_jsx(\"div\", {\n        role: \"presentation\",\n        className: \"carousel-buttons-next\",\n        onClick: handleNextSlide,\n        children: buttonNext\n      })]\n    }), withRange && /*#__PURE__*/_jsxs(\"div\", {\n      className: \"carousel-range\",\n      children: [/*#__PURE__*/_jsx(\"span\", {\n        className: \"carousel-range-number\",\n        children: \"01\"\n      }), /*#__PURE__*/_jsx(\"input\", {\n        className: \"carousel-range-input\",\n        value: slide,\n        type: \"range\",\n        min: \"0\",\n        max: children.length - 1,\n        step: \"1\",\n        onChange: ({\n          target: {\n            value\n          }\n        }) => {\n          setSlide(+value);\n        }\n      }), /*#__PURE__*/_jsx(\"span\", {\n        className: \"carousel-range-number\",\n        children: `${children.length < 10 ? 0 : ''}${children.length}`\n      })]\n    }), withDots && /*#__PURE__*/_jsx(\"div\", {\n      className: \"carousel-dots\",\n      children: children.map((_, idx) => /*#__PURE__*/_jsx(\"div\", {\n        role: \"presentation\",\n        className: `carousel-dots-item ${idx === slide ? 'carousel-dots-item-current' : ''}`,\n        onClick: () => setSlide(idx)\n      }, idx))\n    })]\n  });\n};\n\nexport default Carousel;","map":null,"metadata":{},"sourceType":"module"}