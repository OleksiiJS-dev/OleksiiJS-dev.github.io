{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Documents\\\\GitHub\\\\blind-blind\\\\src\\\\components\\\\ModalWindowStart\\\\ModalWindowStart.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport { useState, useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport Modal from '../Modal/Modal';\nimport Close from '../../assets/svg/close.svg';\nimport { useRouter } from 'next/router';\nimport { TRANSLATE } from '../../constants/languages';\nimport Form from '../Form/Form';\nimport { FORMIK } from '../../constants/form';\n\nvar ModalWindowStart = function ModalWindowStart() {\n  _s();\n\n  var _useState = useState(false),\n      modalOpen = _useState[0],\n      setModalOpen = _useState[1];\n\n  var _useState2 = useState(false),\n      wasModalOpened = _useState2[0],\n      setWasModalOpened = _useState2[1];\n\n  var _useRouter = useRouter(),\n      locale = _useRouter.locale;\n\n  var handleShowModal = function handleShowModal() {\n    setModalOpen(!modalOpen);\n    localStorage.setItem('wasModalOpened', 'true');\n    document.body.classList.toggle('hide-overflow');\n  };\n\n  useEffect(function () {\n    if (localStorage.getItem('wasModalOpened')) setWasModalOpened(true);\n  }, []);\n  useEffect(function () {\n    if (!wasModalOpened) {\n      var startTimeout = function startTimeout() {\n        return setTimeout(function () {\n          handleShowModal();\n        }, 10000);\n      };\n\n      var timeout = startTimeout();\n      return function () {\n        return clearTimeout(timeout);\n      };\n    }\n  }, [wasModalOpened]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: modalOpen && /*#__PURE__*/createPortal( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"window-start\",\n      children: /*#__PURE__*/_jsxDEV(Modal, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"window-start__wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"close\",\n            onClick: function onClick(e) {\n              e.stopPropagation();\n              handleShowModal();\n            },\n            children: /*#__PURE__*/_jsxDEV(Close, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 19\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 17\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"window-start__container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"window-start__title\",\n              children: \"blind\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 19\n            }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"window-start__text\",\n              children: TRANSLATE[locale].modalWindowStartText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 19\n            }, _this), /*#__PURE__*/_jsxDEV(Form, {\n              formikConfig: {\n                initialValues: FORMIK.modalStartForm.values,\n                validationSchema: FORMIK.modalStartForm.validationSchema(locale),\n                onSubmit: function onSubmit(_ref, _ref2) {\n                  var firstName = _ref.firstName,\n                      email = _ref.email,\n                      phone = _ref.phone,\n                      dob = _ref.dob;\n                  var resetForm = _ref2.resetForm;\n                  fetch('/api/subscription', {\n                    headers: {\n                      'Content-Type': 'application/json'\n                    },\n                    method: 'POST',\n                    body: JSON.stringify({\n                      firstName: firstName,\n                      email: email,\n                      phone: phone,\n                      dob: dob\n                    })\n                  }).then(function (res) {\n                    if (!res.ok) {\n                      throw Error(res.statusText);\n                    }\n\n                    resetForm();\n                    handleShowModal();\n                  });\n                }\n              },\n              types: FORMIK.modalStartForm.types,\n              placeholders: FORMIK.modalStartForm.placeholders(locale),\n              buttonTitle: TRANSLATE[locale].subscribe\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 19\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }, _this), document.body)\n  }, void 0, false);\n};\n\n_s(ModalWindowStart, \"TMVL15/KMOCyg0O/MCT5TpaVbag=\", false, function () {\n  return [useRouter];\n});\n\n_c = ModalWindowStart;\nexport default ModalWindowStart;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalWindowStart\");","map":{"version":3,"sources":["C:/Users/user/Documents/GitHub/blind-blind/src/components/ModalWindowStart/ModalWindowStart.tsx"],"names":["useState","useEffect","createPortal","Modal","Close","useRouter","TRANSLATE","Form","FORMIK","ModalWindowStart","modalOpen","setModalOpen","wasModalOpened","setWasModalOpened","locale","handleShowModal","localStorage","setItem","document","body","classList","toggle","getItem","startTimeout","setTimeout","timeout","clearTimeout","e","stopPropagation","modalWindowStartText","initialValues","modalStartForm","values","validationSchema","onSubmit","firstName","email","phone","dob","resetForm","fetch","headers","method","JSON","stringify","then","res","ok","Error","statusText","types","placeholders","subscribe"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\nimport { useState, useEffect } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport Modal from '../Modal/Modal';\r\nimport Close from '../../assets/svg/close.svg';\r\nimport { useRouter } from 'next/router';\r\nimport { TRANSLATE } from '../../constants/languages';\r\nimport Form from '../Form/Form';\r\nimport { FORMIK } from '../../constants/form';\r\n\r\nconst ModalWindowStart: React.FC = () => {\r\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\r\n  const [wasModalOpened, setWasModalOpened] = useState<boolean>(false);\r\n  const { locale } = useRouter();\r\n  const handleShowModal = () => {\r\n    setModalOpen(!modalOpen);\r\n    localStorage.setItem('wasModalOpened', 'true');\r\n    document.body.classList.toggle('hide-overflow');\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem('wasModalOpened')) setWasModalOpened(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!wasModalOpened) {\r\n      const startTimeout = () => {\r\n        return setTimeout(() => {\r\n          handleShowModal();\r\n        }, 10000);\r\n      };\r\n      const timeout = startTimeout();\r\n\r\n      return () => clearTimeout(timeout);\r\n    }\r\n  }, [wasModalOpened]);\r\n\r\n  return (\r\n    <>\r\n      {modalOpen &&\r\n        createPortal(\r\n          <div className=\"window-start\">\r\n            <Modal>\r\n              <div className=\"window-start__wrapper\">\r\n                <div\r\n                  className=\"close\"\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    handleShowModal();\r\n                  }}\r\n                >\r\n                  <Close />\r\n                </div>\r\n                <div className=\"window-start__container\">\r\n                  <h1 className=\"window-start__title\">blind</h1>\r\n                  <p className=\"window-start__text\">\r\n                    {TRANSLATE[locale as 'ru' | 'en'].modalWindowStartText}\r\n                  </p>\r\n                  <Form\r\n                    formikConfig={{\r\n                      initialValues: FORMIK.modalStartForm.values,\r\n                      validationSchema: FORMIK.modalStartForm.validationSchema(\r\n                        locale as 'ru' | 'en'\r\n                      ),\r\n                      onSubmit: (\r\n                        { firstName, email, phone, dob },\r\n                        { resetForm }\r\n                      ) => {\r\n                        fetch('/api/subscription', {\r\n                          headers: {\r\n                            'Content-Type': 'application/json',\r\n                          },\r\n                          method: 'POST',\r\n                          body: JSON.stringify({\r\n                            firstName,\r\n                            email,\r\n                            phone,\r\n                            dob,\r\n                          }),\r\n                        }).then((res) => {\r\n                          if (!res.ok) {\r\n                            throw Error(res.statusText);\r\n                          }\r\n                          resetForm();\r\n                          handleShowModal();\r\n                        });\r\n                      },\r\n                    }}\r\n                    types={FORMIK.modalStartForm.types}\r\n                    placeholders={FORMIK.modalStartForm.placeholders(\r\n                      locale as 'ru' | 'en'\r\n                    )}\r\n                    buttonTitle={TRANSLATE[locale as 'ru' | 'en'].subscribe}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </Modal>\r\n          </div>,\r\n          document.body\r\n        )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ModalWindowStart;\r\n"]},"metadata":{},"sourceType":"module"}