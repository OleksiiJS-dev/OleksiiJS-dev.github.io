{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\archivegit\\\\blind-blind\\\\src\\\\components\\\\Goods\\\\PriceLabel.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useContext } from 'react';\nimport { currencyContext } from '../../context/currencyContext';\n\nvar PriceLabel = function PriceLabel(_ref) {\n  _s();\n\n  var price = _ref.price,\n      stockPrice = _ref.stockPrice;\n\n  var _ref2 = useContext(currencyContext),\n      currency = _ref2.currency,\n      currencyRate = _ref2.currencyRate;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"price-container\",\n    children: stockPrice ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"old-price\",\n        children: \"\".concat((Number.parseFloat(price) / currencyRate).toFixed(2), \" \").concat(currency)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stock-price\",\n        children: \"\".concat((Number.parseFloat(stockPrice) / currencyRate).toFixed(2), \" \").concat(currency)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"price\",\n      children: \"\".concat((Number.parseFloat(price) / currencyRate).toFixed(2), \" \").concat(currency)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(PriceLabel, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\n_c = PriceLabel;\nexport default PriceLabel;\n\nvar _c;\n\n$RefreshReg$(_c, \"PriceLabel\");","map":{"version":3,"sources":["D:/archivegit/blind-blind/src/components/Goods/PriceLabel.tsx"],"names":["useContext","currencyContext","PriceLabel","price","stockPrice","currency","currencyRate","Number","parseFloat","toFixed"],"mappings":";;;;;;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,SAASC,eAAT,QAAgC,+BAAhC;;AAKA,IAAMC,UAAsC,GAAG,SAAzCA,UAAyC,OAA2B;AAAA;;AAAA,MAAxBC,KAAwB,QAAxBA,KAAwB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AAAA,cACrCJ,UAAU,CAC3CC,eAD2C,CAD2B;AAAA,MAChEI,QADgE,SAChEA,QADgE;AAAA,MACtDC,YADsD,SACtDA,YADsD;;AAKxE,sBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,cACGF,UAAU,gBACT;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,4BACM,CAACG,MAAM,CAACC,UAAP,CAAkBL,KAAlB,IAA2BG,YAA5B,EAA0CG,OAA1C,CACF,CADE,CADN,cAGOJ,QAHP;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAME;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,4BACM,CAACE,MAAM,CAACC,UAAP,CAAkBJ,UAAlB,IAAgCE,YAAjC,EAA+CG,OAA/C,CACF,CADE,CADN,cAGOJ,QAHP;AAAA;AAAA;AAAA;AAAA;AAAA,eANF;AAAA,oBADS,gBAcT;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,0BACM,CAACE,MAAM,CAACC,UAAP,CAAkBL,KAAlB,IAA2BG,YAA5B,EAA0CG,OAA1C,CACF,CADE,CADN,cAGOJ,QAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAfJ;AAAA;AAAA;AAAA;AAAA,WADF;AAwBD,CA7BD;;GAAMH,U;;KAAAA,U;AA+BN,eAAeA,UAAf","sourcesContent":["import { useContext } from 'react';\r\n\r\nimport { currencyContext } from '../../context/currencyContext';\r\n\r\nimport { IPriceLabelProps } from './Types';\r\nimport { ICurrencyContext } from '../../context/Types';\r\n\r\nconst PriceLabel: React.FC<IPriceLabelProps> = ({ price, stockPrice }) => {\r\n  const { currency, currencyRate } = useContext(\r\n    currencyContext\r\n  ) as ICurrencyContext;\r\n\r\n  return (\r\n    <div className=\"price-container\">\r\n      {stockPrice ? (\r\n        <>\r\n          <div className=\"old-price\">\r\n            {`${(Number.parseFloat(price) / currencyRate).toFixed(\r\n              2\r\n            )} ${currency}`}\r\n          </div>\r\n          <div className=\"stock-price\">\r\n            {`${(Number.parseFloat(stockPrice) / currencyRate).toFixed(\r\n              2\r\n            )} ${currency}`}\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <div className=\"price\">\r\n          {`${(Number.parseFloat(price) / currencyRate).toFixed(\r\n            2\r\n          )} ${currency}`}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PriceLabel;\r\n"]},"metadata":{},"sourceType":"module"}