{"ast":null,"code":"import _regeneratorRuntime from \"D:/archivegit/blind-blind/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/archivegit/blind-blind/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar url = process.env.NEXT_PUBLIC_COCKPIT_URL;\nvar token = process.env.NEXT_PUBLIC_COCKPIT_TOKEN;\nexport var getCockpitCollection = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(collectionName, params) {\n    var requestResult, cockpitData;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(url + \"api/collections/get/\".concat(collectionName, \"?\").concat(params), {\n              headers: {\n                Authorization: \"Bearer \".concat(token)\n              }\n            });\n\n          case 2:\n            requestResult = _context.sent;\n            _context.next = 5;\n            return requestResult.json();\n\n          case 5:\n            cockpitData = _context.sent;\n            return _context.abrupt(\"return\", cockpitData);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getCockpitCollection(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getCockpitCollections = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(collections) {\n    var collectionPromises;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            collectionPromises = collections.map(function (collection) {\n              return getCockpitCollection(collection);\n            });\n            _context2.next = 3;\n            return Promise.all(collectionPromises);\n\n          case 3:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getCockpitCollections(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["D:/archivegit/blind-blind/src/utils/getCockpitData.ts"],"names":["url","process","env","NEXT_PUBLIC_COCKPIT_URL","token","NEXT_PUBLIC_COCKPIT_TOKEN","getCockpitCollection","collectionName","params","fetch","headers","Authorization","requestResult","json","cockpitData","getCockpitCollections","collections","collectionPromises","map","collection","Promise","all"],"mappings":";;AAAA,IAAMA,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,uBAAxB;AACA,IAAMC,KAAK,GAAGH,OAAO,CAACC,GAAR,CAAYG,yBAA1B;AAEA,OAAO,IAAMC,oBAAoB;AAAA,sEAAG,iBAClCC,cADkC,EAElCC,MAFkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAINC,KAAK,CAC/BT,GAAG,iCAA0BO,cAA1B,cAA4CC,MAA5C,CAD4B,EAE/B;AACEE,cAAAA,OAAO,EAAE;AAAEC,gBAAAA,aAAa,mBAAYP,KAAZ;AAAf;AADX,aAF+B,CAJC;;AAAA;AAI5BQ,YAAAA,aAJ4B;AAAA;AAAA,mBAURA,aAAa,CAACC,IAAd,EAVQ;;AAAA;AAU5BC,YAAAA,WAV4B;AAAA,6CAY3BA,WAZ2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBR,oBAAoB;AAAA;AAAA;AAAA,GAA1B;AAeP,OAAO,IAAMS,qBAAqB;AAAA,uEAAG,kBAAOC,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BC,YAAAA,kBAD6B,GACRD,WAAW,CAACE,GAAZ,CAAgB,UAACC,UAAD;AAAA,qBACzCb,oBAAoB,CAACa,UAAD,CADqB;AAAA,aAAhB,CADQ;AAAA;AAAA,mBAItBC,OAAO,CAACC,GAAR,CAAYJ,kBAAZ,CAJsB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAArBF,qBAAqB;AAAA;AAAA;AAAA,GAA3B","sourcesContent":["const url = process.env.NEXT_PUBLIC_COCKPIT_URL as string;\r\nconst token = process.env.NEXT_PUBLIC_COCKPIT_TOKEN as string;\r\n\r\nexport const getCockpitCollection = async (\r\n  collectionName: string,\r\n  params?: string\r\n) => {\r\n  const requestResult = await fetch(\r\n    url + `api/collections/get/${collectionName}?${params}`,\r\n    {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    }\r\n  );\r\n  const cockpitData = await requestResult.json();\r\n\r\n  return cockpitData;\r\n};\r\n\r\nexport const getCockpitCollections = async (collections: string[]) => {\r\n  const collectionPromises = collections.map((collection) =>\r\n    getCockpitCollection(collection)\r\n  );\r\n  return await Promise.all(collectionPromises);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}