{"ast":null,"code":"import { setTimeout } from 'timers';\nimport { existsSync, mkdirSync } from 'fs';\nimport { writeFile } from 'fs/promises';\nimport { getCockpitCollection } from '../../src/utils/getCockpitData';\nimport getMoySkladData from '../../src/utils/getMoySkladData';\nimport xml from 'xml';\nconst priceFormat = new Intl.NumberFormat('en-US', {\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n  style: 'decimal',\n  useGrouping: false\n});\n\nconst googleFeed = async (_req, res) => {\n  const baseUrl = process.env.NEXT_PUBLIC_SITE_URL;\n  const servePath = process.cwd() + '/public/xml/';\n  const goodsResponse = await getCockpitCollection('Goods');\n  const goods = goodsResponse.entries;\n\n  const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n  if (!existsSync(servePath)) mkdirSync(servePath);\n  const goodsData = await Promise.all(goods.map(async ({\n    _id,\n    title,\n    title_en,\n    description,\n    description_en,\n    link,\n    previewImage: {\n      path: previewImagePath\n    },\n    secondImage: {\n      path: secondImagePath\n    },\n    collection,\n    price,\n    stockPrice,\n    isExclusive\n  }, idx) => {\n    var _moyskladData$rows;\n\n    await delay(67 * idx);\n    const moyskladData = await getMoySkladData(`remap/1.2/entity/variant?filter=code~=${link.replace('/', '')}`);\n    const availability = isExclusive ? 'backorder' : !!(moyskladData !== null && moyskladData !== void 0 && (_moyskladData$rows = moyskladData.rows) !== null && _moyskladData$rows !== void 0 && _moyskladData$rows.length) || false ? 'in_stock' : 'out_of_stock';\n    const item_ru = [{\n      'g:id': _id\n    }, {\n      'g:title': title\n    }, {\n      'g:description': description\n    }, {\n      'g:link': encodeURI(`${baseUrl}/goods${link}`)\n    }, {\n      'g:image_link': encodeURI(`${process.env.NEXT_PUBLIC_COCKPIT_URL}${previewImagePath}`)\n    }, {\n      'g:brand': 'BLIND'\n    }, {\n      'g:availability': availability\n    }, {\n      'g:price': `${priceFormat.format(+price)} UAH`\n    }];\n    const item_en = [{\n      'g:title': title_en\n    }, {\n      'g:description': description_en\n    }, {\n      'g:link': encodeURI(`${baseUrl}/goods${link}`)\n    }, {\n      'g:image_link': encodeURI(`${process.env.NEXT_PUBLIC_COCKPIT_URL}${previewImagePath}`)\n    }, {\n      'g:brand': 'BLIND'\n    }, {\n      'g:availability': availability\n    }, {\n      'g:price': `${priceFormat.format(+price)} UAH`\n    }];\n\n    if (secondImagePath !== undefined) {\n      item_ru.push({\n        'g:additional_image_link': `${process.env.NEXT_PUBLIC_COCKPIT_URL}${secondImagePath}`\n      });\n      item_en.push({\n        'g:additional_image_link': `${process.env.NEXT_PUBLIC_COCKPIT_URL}${secondImagePath}`\n      });\n    }\n\n    if (collection !== undefined && collection.display !== undefined) {\n      item_ru.push({\n        'g:product_type': `${collection.display}`\n      });\n      item_en.push({\n        'g:product_type': `${collection.display}`\n      });\n    }\n\n    if (!isNaN(+((stockPrice === null || stockPrice === void 0 ? void 0 : stockPrice.trim()) || NaN))) {\n      Object.defineProperty(item_ru, 'g:sale_price', {\n        value: `${stockPrice} UAH`\n      });\n      Object.defineProperty(item_en, 'g:sale_price', {\n        value: `${stockPrice} UAH`\n      });\n    }\n\n    return {\n      item_ru,\n      item_en\n    };\n  }));\n  const xml_ru = {\n    rss: [{\n      _attr: {\n        'xmlns:g': 'http://base.google.com/ns/1.0',\n        version: '2.0'\n      }\n    }, {\n      title: 'BLIND-BLIND'\n    }, {\n      link: baseUrl\n    }, {\n      description: 'BLIND-BLIND product feed'\n    }, {\n      channel: goodsData.map(({\n        item_ru\n      }) => ({\n        item: item_ru\n      }))\n    }]\n  };\n  const xml_en = {\n    rss: [{\n      _attr: {\n        'xmlns:g': 'http://base.google.com/ns/1.0',\n        version: '2.0'\n      }\n    }, {\n      title: 'BLIND-BLIND'\n    }, {\n      link: baseUrl\n    }, {\n      description: 'BLIND-BLIND product feed'\n    }, {\n      channel: goodsData.map(({\n        item_en\n      }) => ({\n        item: item_en\n      }))\n    }]\n  };\n  await Promise.all([writeFile(servePath + 'google_ru.xml', xml(xml_ru)), writeFile(servePath + 'google_en.xml', xml(xml_en))]);\n  res.send(200);\n};\n\nexport default googleFeed;","map":null,"metadata":{},"sourceType":"module"}