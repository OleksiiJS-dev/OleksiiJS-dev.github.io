{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport Error from '../_error';\nimport Runway from '../../src/components/Runway/Runway';\nimport Seo from '../../src/components/Seo/Seo';\nimport { getCockpitCollection } from '../../src/utils/getCockpitData';\nimport { DEFAULT_DESCRIPTION, SEO_ITEMS } from '../../src/constants/seoItems';\n\nconst BlindStylePage = ({\n  runwayProps,\n  locale\n}) => {\n  if (!runwayProps) return /*#__PURE__*/_jsx(Error, {});\n  const {\n    title,\n    photos,\n    videoLink,\n    description,\n    link\n  } = runwayProps;\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: \"blind-style-page\",\n    children: [/*#__PURE__*/_jsx(Seo, {\n      title: title,\n      description: description || DEFAULT_DESCRIPTION[locale],\n      breadcrumbs: [{\n        title: SEO_ITEMS[locale].indexPage.breadcrumbName,\n        link: SEO_ITEMS[locale].indexPage.link\n      }, {\n        title: title,\n        link: link\n      }],\n      lang: locale,\n      path: '/blind-style' + link\n    }), /*#__PURE__*/_jsx(Runway, {\n      title: title,\n      photos: photos.map(photo => photo.path),\n      videoLinks: videoLink === null || videoLink === void 0 ? void 0 : videoLink.map(({\n        value\n      }) => value)\n    })]\n  });\n};\n\nexport const getServerSideProps = async ({\n  locale,\n  defaultLocale,\n  query\n}) => {\n  const filter = `filter[link]=/${query.runway}&populate=1`;\n  const runwayData = await getCockpitCollection('Runways', filter);\n  const curRunway = runwayData.total ? runwayData.entries[0] : null;\n  const runwayProps = curRunway ? {\n    title: locale === defaultLocale ? curRunway.title : curRunway.title_en,\n    description: defaultLocale ? curRunway.description : curRunway.description_en,\n    photos: curRunway.photos,\n    videoLink: curRunway.videoLink ? curRunway.videoLink : null\n  } : null;\n  return {\n    props: {\n      runwayProps,\n      locale\n    }\n  };\n};\nexport default BlindStylePage;","map":null,"metadata":{},"sourceType":"module"}