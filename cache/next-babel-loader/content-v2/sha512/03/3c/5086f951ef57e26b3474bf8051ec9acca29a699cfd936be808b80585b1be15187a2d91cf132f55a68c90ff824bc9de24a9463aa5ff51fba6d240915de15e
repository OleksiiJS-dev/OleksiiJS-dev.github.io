{"ast":null,"code":"import { Telegram } from 'telegraf';\nimport sendGrid from '../../backendHelpers/sendGrid';\nconst bot = new Telegram(process.env.NEXT_PUBLIC_TELEGRAM_KEY);\n\nconst sendEmail = (phone, cookies, ip) => {\n  const emailBody = `\n    Телефон: ${phone.replace('+', '')} \\n\n    Utm_data: ${cookies.utm_data || 'none'} \\n\n    Utm_source: ${cookies.utm_source || 'none'} \\n\n    Utm_medium: ${cookies.utm_medium || 'none'} \\n\n    Utm_campaign: ${cookies.utm_campaign || 'none'} \\n\n    Utm_term: ${cookies.utm_term || 'none'} \\n\n    Utm_content: ${cookies.utm_content || 'none'} \\n\n    User_ip: ${ip || 'none'} \\n\n    Location: ${cookies.user_geo || 'none'} \\n\n    REF URL: ${cookies.ref_url || 'none'} \\n\n    GA: ${cookies._ga || 'none'} \\n\n  `;\n  const msg = {\n    to: process.env.EMAIL_TO,\n    from: process.env.EMAIL_FROM,\n    subject: 'Обратная связь',\n    text: emailBody\n  };\n  sendGrid.send(msg).then(console.log, error => {\n    console.error(error);\n\n    if (error.response) {\n      console.error(error.response.body);\n    }\n  });\n};\n\nconst request = async (req, res) => {\n  const {\n    phone\n  } = req.body;\n  const ip = req.headers['x-forwarded-for'] || req.socket.remoteAddress || null;\n  if (!phone) res.status(400).send({\n    message: 'Bad Request'\n  });\n  const url = `${process.env.NEXT_PUBLIC_COCKPIT_URL}api/collections/save/Request`;\n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${process.env.NEXT_PUBLIC_COCKPIT_TOKEN}`\n      },\n      body: JSON.stringify({\n        data: {\n          phone\n        }\n      })\n    });\n    const sendOrderUsersUrl = `${process.env.NEXT_PUBLIC_COCKPIT_URL}api/collections/get/BotUsers`;\n    const usersResponse = await fetch(sendOrderUsersUrl, {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${process.env.NEXT_PUBLIC_COCKPIT_TOKEN}`\n      }\n    });\n    sendEmail(phone, req.cookies, ip);\n    const {\n      entries\n    } = await usersResponse.json();\n    entries.forEach(({\n      chatId\n    }) => {\n      bot.sendMessage(chatId, `Телефон:${phone}`);\n    });\n\n    if (response.status === 200) {\n      return res.status(200).send({\n        message: 'ok'\n      });\n    }\n  } catch {\n    return res.status(400).send({\n      message: 'Bad Request'\n    });\n  }\n};\n\nexport default request;","map":null,"metadata":{},"sourceType":"module"}