{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createHash } from 'crypto';\nimport { Telegram } from 'telegraf';\nimport { FORM } from '../../src/constants/form';\nimport sendGrid from '../../backendHelpers/sendGrid';\nimport getPromocode from '../../backendHelpers/getPromocode';\nconst bot = new Telegram(process.env.NEXT_PUBLIC_TELEGRAM_KEY);\n\nconst getGoodsMessage = ({\n  goods\n}) => goods.reduce((acc, {\n  name,\n  size\n}) => acc + `Название: ${name}, Размер: ${size}; | `, '');\n\nconst sendEmail = async (name, surname, email, country, city, phone, paymentType, deliveryType, deliveryCost, warehouse, street, house, flat, cart, totalSum, promoCode, cookies, ip) => {\n  const [promoCodeValues] = await getPromocode(promoCode);\n  const emailBody = `\n    Товары: ${getGoodsMessage(cart)} \\n\n    Сумма: ${totalSum} \\n\n    Промокод: ${promoCode || 'none'} \\n\n    Скидка: ${promoCodeValues !== null && promoCodeValues !== void 0 && promoCodeValues.discount ? (promoCodeValues === null || promoCodeValues === void 0 ? void 0 : promoCodeValues.discount) + '%' : 'none'} \\n\n    Тип оплаты: ${paymentType} \\n\n    Cтрана доставки: ${country} \\n\n    Город доставки: ${city} \\n\n    Тип доставки: ${deliveryType} \\n\n    Стоимость Доставки: ${deliveryCost} \\n\n    Отделение НП: ${warehouse || 'none'} \\n\n    Улица: ${street || 'none'} \\n\n    Дом: ${house || 'none'} \\n\n    Квартира: ${flat || 'none'} \\n\n    Имя: ${name} \\n\n    Фамилия: ${surname} \\n\n    Телефон: ${phone.replace('+', '')} \\n\n    Емеил: ${email} \\n\n    Utm_data: ${cookies.utm_data || 'none'} \\n\n    Utm_source: ${cookies.utm_source || 'none'} \\n\n    Utm_medium: ${cookies.utm_medium || 'none'} \\n\n    Utm_campaign: ${cookies.utm_campaign || 'none'} \\n\n    Utm_term: ${cookies.utm_term || 'none'} \\n\n    Utm_content: ${cookies.utm_content || 'none'} \\n\n    User_ip: ${ip || 'none'} \\n\n    Location: ${cookies.user_geo || 'none'} \\n\n    REF URL: ${cookies.ref_url || 'organic'} \\n\n    GA: ${cookies._ga || 'none'} \\n\n  `;\n  const msg = {\n    to: process.env.EMAIL_TO,\n    from: process.env.EMAIL_FROM,\n    subject: 'Заказ',\n    text: emailBody\n  };\n  sendGrid.send(msg).then(console.log, error => {\n    console.error(error);\n\n    if (error.response) {\n      console.error(error.response.body);\n    }\n  });\n};\n\nconst sendToBot = async (users, name, surname, email, country, city, phone, paymentType, deliveryType, warehouse, street, house, flat, locale, currency, cart, totalSum, deliveryCost) => {\n  try {\n    const certeficatesMessage = cart.certeficatePrice.reduce((acc, price, index) => acc + `Цена: ${price}${currency}, Почта получателя: ${cart.receiverEmail[index]}, Имя получателя: ${cart.receiverName[index]}, Сообщение: ${cart.message[index]} | `, '');\n    const goodsMessage = getGoodsMessage(cart);\n    const message = `Имя: ${name}\\n` + `Фамилия: ${surname}\\n` + `Почта: ${email}\\n` + `Cтрана: ${country}\\n` + `Город: ${city}\\n` + `Телефон: ${phone}\\n` + `Тип оплаты: ${paymentType}\\n` + `Тип Доставки: ${deliveryType}\\n` + `Стоимость Доставки: ${deliveryCost}\\n` + `Отделение НП: ${warehouse}\\n` + `Улица: ${street}\\n` + `Дом: ${house}\\n` + `Квартира: ${flat}\\n` + `Язык: ${locale}\\n` + `Cумма: ${totalSum}${currency}\\n` + `Сертификаты: ${cart.certeficatePrice.length ? certeficatesMessage : ''}\\n` + `Товары: ${cart.goods.length ? goodsMessage : ''}\\n`;\n    const messages = users.map(({\n      chatId\n    }) => bot.sendMessage(+chatId, message));\n    await Promise.allSettled(messages).catch(err => console.log(err));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst checkout = async (req, res) => {\n  try {\n    const ip = req.headers['x-forwarded-for'] || req.socket.remoteAddress || null;\n    const {\n      name,\n      surname,\n      email,\n      country,\n      city,\n      phone,\n      paymentType,\n      deliveryMethod,\n      locale,\n      currency,\n      items = [],\n      totalSum,\n      coupon,\n      warehouse,\n      street,\n      house,\n      flat,\n      deliveryCost\n    } = req.body;\n    const check = locale && name && email && surname && country && city && phone && paymentType && deliveryMethod && items.length && currency && deliveryCost !== undefined && totalSum;\n    if (!check) return res.status(400).send({\n      message: 'Bad Request'\n    });\n    const url = `${process.env.NEXT_PUBLIC_COCKPIT_URL}api/collections/save/checkouts`;\n    const sendOrderUsersUrl = `${process.env.NEXT_PUBLIC_COCKPIT_URL}api/collections/get/BotUsers`;\n    const usersResponse = await fetch(sendOrderUsersUrl, {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${process.env.NEXT_PUBLIC_COCKPIT_TOKEN}`\n      }\n    });\n    const {\n      entries\n    } = await usersResponse.json();\n    const cart = items.reduce((acc, item) => {\n      var _item$id;\n\n      if ((_item$id = item.id) !== null && _item$id !== void 0 && _item$id.startsWith('voucher')) {\n        return _objectSpread(_objectSpread({}, acc), {}, {\n          certeficatePrice: [...acc.certeficatePrice, item.price],\n          receiverEmail: [...acc.receiverEmail, item.receiverEmail],\n          receiverName: [...acc.receiverName, item.receiverName],\n          message: [...acc.message, item.message]\n        });\n      }\n\n      return _objectSpread(_objectSpread({}, acc), {}, {\n        items: [...acc.items, {\n          _id: item.id,\n          link: 'Goods'\n        }],\n        sizes: [...acc.sizes, item.details],\n        goods: [...acc.goods, {\n          name: item.title,\n          size: item.details\n        }]\n      });\n    }, {\n      items: [],\n      sizes: [],\n      certeficatePrice: [],\n      receiverEmail: [],\n      receiverName: [],\n      goods: [],\n      message: []\n    });\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${process.env.NEXT_PUBLIC_COCKPIT_TOKEN}`\n      },\n      body: JSON.stringify({\n        data: _objectSpread(_objectSpread({}, req.body), {}, {\n          items: cart.items,\n          sizes: cart.sizes,\n          certeficatePrice: cart.certeficatePrice,\n          receiverEmail: cart.receiverEmail,\n          receiverName: cart.receiverName,\n          message: cart.message,\n          isPaid: false\n        })\n      })\n    });\n    await sendToBot(entries, name, surname, email, country, city, phone, paymentType, deliveryMethod, warehouse, street, house, flat, locale, currency, cart, totalSum, deliveryCost);\n    await sendEmail(name, surname, email, country, city, phone, paymentType, deliveryMethod, deliveryCost, warehouse, street, house, flat, cart, totalSum, coupon, req.cookies, ip);\n    const {\n      _id\n    } = await response.json();\n\n    if (paymentType === FORM[locale].paymentOnline) {\n      const data = {\n        version: 3,\n        public_key: process.env.NEXT_PUBLIC_LIQPAY_KEY,\n        action: 'pay',\n        amount: totalSum,\n        currency: currency,\n        order_id: _id,\n        description: 'Покупка в магазине BLIND-BLIND',\n        result_url: `${process.env.NEXT_PUBLIC_HOME_URL}thank-you`,\n        server_url: `${process.env.NEXT_PUBLIC_HOME_URL}api/confirmPayment`\n      };\n      const encodedData = Buffer.from(JSON.stringify(data)).toString('base64');\n      const signature = createHash('sha1').update(`${process.env.LIQPAY_PRIVATE_KEY}${encodedData}${process.env.LIQPAY_PRIVATE_KEY}`).digest('base64');\n      return res.status(200).send({\n        data: encodedData,\n        signature\n      });\n    }\n\n    return res.status(200).send({\n      message: 'ok'\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default checkout;","map":null,"metadata":{},"sourceType":"module"}